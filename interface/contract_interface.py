from web3 import Web3
import json
import os
from web3.exceptions import ContractLogicError

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π Hardhat-–Ω–æ–¥–µ
w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545"))
assert w3.is_connected(), "‚ùå Web3 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"

# –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
CONTRACT_ADDRESS = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ ABI
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
abi_path = os.path.join(BASE_DIR, "artifacts", "contracts", "VectorStore.sol", "VectorStore.json")

print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º ABI –∏–∑: {abi_path}")

with open(abi_path, "r", encoding="utf-8") as f:
    contract_data = json.load(f)
    abi = contract_data["abi"]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
contract = w3.eth.contract(address=CONTRACT_ADDRESS, abi=abi)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
w3.eth.default_account = w3.eth.accounts[0]

# –£—Ç–∏–ª–∏—Ç—ã
def get_vec_id(name: str) -> bytes:
    """–ü–æ–ª—É—á–∏—Ç—å bytes32 id –≤–µ–∫—Ç–æ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
    return w3.keccak(text=name)

def vector_exists(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–µ–∫—Ç–æ—Ä —Å —Ç–∞–∫–∏–º id"""
    vec_id = get_vec_id(name)
    return contract.functions.vectorExists(vec_id).call()

def _sanitize_values(values) -> list[int]:
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    sanitized = []
    for v in values:
        try:
            sanitized.append(int(v))
        except Exception as e:
            raise ValueError(f"Invalid vector value: {v} ({type(v)})") from e
    return sanitized

# –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
def store_vector(name: str, values) -> dict:
    vec_id = get_vec_id(name)
    sanitized_values = _sanitize_values(values)
    try:
        tx = contract.functions.storeVector(vec_id, sanitized_values).transact()
        receipt = w3.eth.wait_for_transaction_receipt(tx)
        return receipt
    except ContractLogicError as err:
        # –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if "Vector already exists" in str(err):
            print("‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ updateVector")
            return update_vector(name, values)
        else:
            raise

def update_vector(name: str, values) -> dict:
    vec_id = get_vec_id(name)
    sanitized_values = _sanitize_values(values)
    tx = contract.functions.updateVector(vec_id, sanitized_values).transact()
    receipt = w3.eth.wait_for_transaction_receipt(tx)
    return receipt

def get_vector(name: str) -> list[int]:
    vec_id = get_vec_id(name)
    return contract.functions.getVector(vec_id).call()

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    vector_name = "my_vector"
    values = [1, 2, 3]

    try:
        # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ, –Ω–æ store_vector —É–º–µ–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è
        if vector_exists(vector_name):
            print("‚ôªÔ∏è –í–µ–∫—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º...")
            receipt = update_vector(vector_name, values)
        else:
            print("üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä...")
            receipt = store_vector(vector_name, values)

        print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:", receipt.transactionHash.hex())

        print("üì° –ü–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä...")
        result = get_vector(vector_name)
        print("üìå –ó–Ω–∞—á–µ–Ω–∏—è:", result)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))